% CSC240 - Sample 'Quest'
% assign the state that will start the program
start_state(front_door_no_key).
% define the edges of the finite state diagram
next_state(front_door_no_key,a,front_door_no_key).
next_state(front_door_no_key,b,front_door_no_key).
next_state(front_door_no_key,c,doormat).
next_state(front_door_no_key,d,window).
next_state(doormat,a,doormat).
next_state(doormat,b,front_door_no_key).
next_state(doormat,c,front_door_with_key).
next_state(window,a,jail).
next_state(window,b,window).
next_state(window,c,front_door_no_key).
next_state(front_door_with_key,a,front_door_with_key).
next_state(front_door_with_key,b,living_room).
next_state(front_door_with_key,c,front_door_no_key).
% code to be executed at the beginning...
display_intro :- 
  write('The journey home...'),nl,nl,
  write('It is two in the morning.'),nl,
  write('You have been having a good time,'),nl,
  write('but now you are tired '),
     write('and want to go to bed.'),nl,
  write('You are home now, '),nl,
  write(' but you realize that your '),
     write('pockets are empty.' ),nl.
% code to be executed at the end...
goodbye :-
  write( 'Have a nice day'), nl.
% code to be executed upon reaching each state
show_state(front_door_no_key) :- 
  write( 'At the front door' ), nl,
  write( 'Do you want to...'), nl,
  write( '(a) Whistle awhile'),nl,
  write( '(b) Open the door and go inside'),nl,
  write( '(c) Look under the doormat'),nl,
  write( '(d) Go to the left'),nl,
  write( '(q) Quit the program'),nl.
show_state(doormat) :-
  write( 'You see a key here'),nl,
  write( 'Do you want to...'), nl,
  write( '(a) Whistle some more'),nl,
  write( '(b) Put down the doormat'),nl,
  write( '(c) pick up the key'),nl,
  write( '(q) Quit the program'),nl.
show_state(window) :-
  write( 'You are in front of a window' ),nl,
  write( 'with a nice flower box' ),nl,
  write( 'Do you want to...'), nl,
  write( '(a) Try to open the window'),nl,
  write( '(b) Dig through the flower box'),nl,
  write( '(c) Go back to the front door'),nl,
  write( '(q) Quit the program'),nl.
show_state(front_door_with_key) :- 
  write( 'At the front door' ), nl,
  write( 'Do you want to...'), nl,
  write( '(a) Whistle awhile'),nl,
  write( '(b) Open the door and go inside'),nl,
  write( '(c) Look under the doormat again'),nl,
  write( '(q) Quit the program'),nl.
% final states do not display a menu 
%  - they automatically quit ('q')
show_state(living_room) :- 
  write( 'In the living room.' ), nl,
  write( 'Welcome home.' ), nl.
show_state(jail) :-
  write( 'The police will be on their '),
    write('way soon' ),nl,
  write( 'Maybe you will be able to get '),
    write( 'some sleep in the holding cell' ),nl,
  write( '... depending on who you get '),
    write( 'for neighbors.' ),nl.
get_choice(living_room,q).
get_choice(jail,q).
% code to be executed for each choice of action from each state...
show_transition(front_door_no_key,a) :- 
  write( 'Nice tune, but you '),
      write('are not getting anywhere...'),nl.
show_transition(front_door_no_key,b) :- 
  write( 'The door is locked, '),
       write('and you have no key.'),nl.
show_transition(front_door_no_key,c) :- 
  write( 'You lift up the doormat '),
       write('and take a peek...'),nl.
show_transition(front_door_no_key,d) :-
  write( 'You stumble off to '),
        write('your left in the dark...'),nl.
show_transition(doormat,a) :-
  write( 'You feel a little better, '),
      write('but you are still outside.' ),nl.
show_transition(doormat,b) :-
  write( 'The doormat is down.' ),nl.
show_transition(doormat,c) :-
  write( 'You pick up the key' ),nl.
show_transition(window,a) :-
  write( 'Wow! That alarm system is loud!' ),nl.
show_transition(window,b) :-
  write( 'Hey! I think you found something!' ),nl,
  write( 'Oh.  A quarter.' ),nl.  
show_transition(window,c) :-
  write( 'Well, that was a waste of time.' ),nl.
  
show_transition(front_door_with_key,a) :- 
  write( 'Nice tune, but you '),
      write('are just wasting time...'),nl.
show_transition(front_door_with_key,b) :- 
  write( 'The door opens and you step inside.'),nl.
show_transition(front_door_with_key,c) :- 
  write( 'You lift up the doormat '),
       write('and you drop the key...'),nl.
show_transition(front_door_no_key,fail) :- 
  write( 'a,b,c,d, or q' ),nl.
show_transition(doormat,fail) :- 
  write( 'a,b,c, or q' ),nl.
show_transition(window,fail) :- 
  write( 'a,b,c, or q' ),nl.
show_transition(front_door_with_key,fail) :- 
  write( 'a,b,c, or q' ),nl.
% basic finite state machine engine
go :-
intro,
start_state(X),
show_state(X),
get_choice(X,Y),
go_to_next_state(X,Y).
intro :-
display_intro,
clear_stored_answers,
      asserta(stored_answer(moves,0)).
go_to_next_state(_,q) :-
      stored_answer(moves,Count),
      write( 'You made this many moves...' ),
      write( Count ), nl,
goodbye,!.
go_to_next_state(S1,Cin) :-
next_state(S1,Cin,S2),
show_transition(S1,Cin),
show_state(S2),
stored_answer(moves,K),
OneMoreMove is K + 1,
retract(stored_answer(moves,_)),
asserta(stored_answer(moves,OneMoreMove)),
get_choice(S2,Cnew),
go_to_next_state(S2,Cnew).
go_to_next_state(S1,Cin) :-
\+ next_state(S1,Cin,_),
show_transition(S1,fail),
get_choice(S1,Cnew),
go_to_next_state(S1,Cnew).
get_choice(_,C) :-
    write('Next entry (letter '),
      write('followed by a period )? '),
    read(C).
% case knowledge base - user responses
:- dynamic(stored_answer/2).
% procedure to get rid of previous responses
% without abolishing the dynamic declaration
clear_stored_answers 
    :- retract(stored_answer(_,_)),fail.
clear_stored_answers.