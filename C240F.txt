CSC240 Final                                                        


Christofer Paes 


(1a)  What is "declarative programming?"


Declarative programming expresses the logic of a computation without describing the flow of the program. 
Declarative programming reduces the details but also reduces the control. 
Declarative programming is similar to a mathematical relation where a single set of inputs may relate to more than one result. 




(1b)  What are the advantages and disadvantages of programming in a declarative style?


The advantages of declarative programming may be more scalable, the intent of what the code is meant to do is clearer from a high-level abstract perspective; however, the high level abstractions can also be a disadvantage if working with new programmers who may not understand some of the declarations because of what may be happening underneath the hood of the declarations or the declaration of the abstraction may be understood differently by the new programmer. 


 
(2)  Compare pointer usage in C++ and Java.  
(a) What is the difference (briefly)?  
The difference between pointers in Java and C++ is that in Java pointers are called references and theyre immutable in Java, while pointers in C++ are mutable and are called pointers.  Java does not allow for pointer arithmetic, it is not allowed and the language developers of Java believe it to be unsafe. Also, in Java references only point to one thing, but in C++ you can make a pointer hold a different address.


(b) What are the advantages and disadvantages?


It is possible to increase the efficiency of a program by using pointers in all kinds of ways, depending on the goal of the program. However, attempting to operate on values via pointers can be unsafe with pointer arithmetic and Java does not allow this.  With pointers you can end up having memory leaks, running out of bounds, or it could just be difficult to work with because of the previous reasons mentioned. 








































(3)  Briefly, in Prolog, what is the difference between  '\+' (not provable) and true logical negation?


The difference between not provable and true logical negation is that the “\+T” means that if T fails it succeeds and if it fails T succeeds. 






































(4)  Why is it important to study and explore non-traditional, alternative programming languages?  
Give at least three reasons.


One reason to continue to learn about nontraditional and alternative programming languages is to be able to practice and reinforce ideas of Computer Science. For example, the difference between recursion and looping. Another reason to practice alternative programming in different languages is to see what other programming languages are capable of, to understand how they work, and possibly how the language can be implemented with a project or program. Lastly, solving problems using nontraditional and alternative programming languages helps the individual programmer build skill in solving problems in a different way, and by giving the programmer different problems or even similar problems allows the programmer to experience how each solution scales and how the tools work with each type of problem. 
(5)  Write a program in C++ to analyze housing prices...


(a)  Write JUST THE PROTOTYPE for a function that loads a list of numbers into a given array and returns the size of the list (how many numbers).    
DO NOT WRITE THIS FUNCTION, JUST WRITE THE PROTOTYPE.
  void (double * listOfPrices[], int &length);  




(b)  Write ONE SUBPROGRAM that is given an array of numbers of a given length, and is also given a lower boundary and an upper boundary, then computes and returns BOTH how many numbers fall within that range (inclusive) AND the average of those numbers.  (The word 'inclusive' means all the numbers greater than or equal to the lower boundary and less than or equal to the upper boundary.)


void giveAvg(double listOfPrices[], int lowerB, int upperB, int &avg) 
{
    double avg = 0; 
  int t = 0 ; 
    for(int i = 0 ; i < length; i++) {
        if(listOfNumbs[i]>= lowerB && listOfNumbs[i]<=upperB){
           avg += listOfNumbs[i];
           t++;
        }
    }
    avg = avg / t;
    }




For EXAMPLE, given this list of 6 numbers:   11, 8, 15, 10, 14, 11
with a lower boundary of 10 and an upper boundary of 14,
there are 4 numbers in that range, and their average is (11+10+14+11)/4 =11.5   
(Add them up and divide by how many there are.)
[By the way, the numbers DON'T have to be integers.]


Use the parameter list for all input and output to the subprogram.  (Don't use the return statement.)
[You must use reference parameters for the outputs.]


(c)  Write the MAIN PROGRAM to do the following:
             (1) load the data for a list of house prices into an array (using the subprogram from (a)).
             (2) ask the user to enter a lower boundary for the house price, and
                   repeat until it is a positive number.


         (3) determine how many houses AND the average price of those houses that
                   fall into the range between the number entered by the user 
                   and an upper boundary of 1 million (using the subprogram from (b)).
         (4) display both the number of houses and the average price.
Repeat steps 2 through 4 until the user chooses to stop.




#include <stdio.h>
#include <iostream>
using namespace std;


//prototypes
void giveAvg(double listOfNumbs[], int lowerB, int upperB, int length, double &avg, int &numberOfHouses) ;
void loadHouseList(double *listOfPrices[], int &length);  


int main()
{
    int lowerBound;
    int upperBound = 1000000;
    double  list[81];
    int length;
    double avg = 0;
    int numberOfHouses;
char another; 


    cout << "Hello this program is used to calculate the avg price of a house"<<
     " from a given list of houses, a given lower boundary, and a given upper boundary " <<endl; 
   
do{ cout<< "Please enter the lower boundary" << endl;
    cin >> lowerBound;
    do{
          cout << "Please enter a positive number only"<< endl; 
          cin >> lowerBound;
      }while(lowerBound < 0);
      giveAvg(list, lowerBound, upperBound,length, avg, );
      cout << avg << endl;
      cout<< numberOfHouses;
    cout << “Would you like to repeat the program? y for yes and n for no  ”  << endl; 
cin >> another;


} while(another != ‘ n’);
      return 0 ;
      
     
   
}


(6)  Write a named function in Scheme that is given two lists of numbers of the same length and computes the sum of the larger numbers of each corresponding pair of numbers at the same position.  Write the function to do this task recursively.


 For example, given these two lists:


list A:  5,   3,  -4,   6,   10
list B:  4,   4,   9,    6,   4


The larger numbers of each pair of numbers are:


larger:      5,   4,   9,   6,   10


So the sum is 34.


; this is the scheme function to sort the two lists
(define(newList ist1 ist2)
  (if(null? ist1)
     '()
     (if(> (car ist1) (car ist2))
        (cons (car ist1) (newList (cdr ist1) (cdr ist2)) )
        (cons (car ist2) (newList (cdr ist1) (cdr ist2)) )
        )
     )
  )
;this is the scheme function that uses function composition to find the Sum of the two lists
(define(computeSum ist1 ist2)
  (if(null? ist1)
     0
     (+ (car (newList ist1 ist2) ) (computeSum (cdr ist1) (cdr ist2) ) )
     ) )
     


(7)  Given a Prolog knowledge base with the following predicates:
        eats( <consumer>, <consumed> ).
        toxicity( <biological-entity>, <level> ).


For example:
        eats( rabbit, carrot ).
        eats( spider, fly ).
        eats( snake, spider ).
        eats( bird, snake ).
        eats( cat, bird ).
        eats( cat, rabbit ).
        eats( dog, _ ).
        toxicity( rabbit, 3 ).
        toxicity( spider, 5 ).
        toxicity( snake, 34 ).
        ...
This is just an example.  The list of facts may be longer.


Define the rules for a Prolog predicate that identifies biological entities that eat something with a toxicity greater than 10, or eat something that eats something with a toxicity greater than 10, or eats something that eats something that eats something with a toxicity greater than 10, and so on without limit.


        % toxicEater( <biological-entity> ).


toxicEater(entitySearch) :- toxicity(entitySearch,level);
eats(entitySearch,_),
toxicity(entitySearch,level);
eats(_,entitySearch),
toxicity(entitySearch,level).
level  > 9.